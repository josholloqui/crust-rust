{"message":"type mismatch in function arguments","code":{"code":"E0631","explanation":"This error indicates a type mismatch in closure arguments.\n\nErroneous code example:\n\n```compile_fail,E0631\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: &str| {});\n}\n```\n\nThe error occurs because `foo` accepts a closure that takes an `i32` argument,\nbut in `main`, it is passed a closure with a `&str` argument.\n\nThis can be resolved by changing the type annotation or removing it entirely\nif it can be inferred.\n\n```\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: i32| {});\n}\n```\n"},"level":"error","spans":[{"file_name":"src/routes.rs","byte_start":1504,"byte_end":1529,"line_start":56,"line_end":56,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"        .and_then(handlers::update_business)","highlight_start":19,"highlight_end":44}],"label":"expected signature of `fn(std::string::String, Business, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/handlers.rs","byte_start":1003,"byte_end":1112,"line_start":37,"line_end":37,"column_start":1,"column_end":110,"is_primary":false,"text":[{"text":"pub async fn update_business(id: i32, new_business: Business, db: Db) -> Result<impl warp::Reply, Infallible> {","highlight_start":1,"highlight_end":110}],"label":"found signature of `fn(i32, Business, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/routes.rs","byte_start":1495,"byte_end":1503,"line_start":56,"line_end":56,"column_start":10,"column_end":18,"is_primary":false,"text":[{"text":"        .and_then(handlers::update_business)","highlight_start":10,"highlight_end":18}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required because of the requirements on the impl of `warp::generic::Func<(std::string::String, Business, Arc<tokio::sync::Mutex<Vec<Business>>>)>` for `fn(i32, Business, Arc<tokio::sync::Mutex<Vec<Business>>>) -> impl Future<Output = Result<Opaque(DefId(0:59 ~ crust_rust[ed02]::handlers::update_business::{opaque#0}::{opaque#0}), []), Infallible>> {handlers::update_business}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0631]\u001b[0m\u001b[0m\u001b[1m: type mismatch in function arguments\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/routes.rs:56:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        .and_then(handlers::update_business)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected signature of `fn(std::string::String, Business, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/handlers.rs:37:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub async fn update_business(id: i32, new_business: Business, db: Db) -> Result<impl warp::Reply, Infallible> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfound signature of `fn(i32, Business, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `warp::generic::Func<(std::string::String, Business, Arc<tokio::sync::Mutex<Vec<Business>>>)>` for `fn(i32, Business, Arc<tokio::sync::Mutex<Vec<Business>>>) -> impl Future<Output = Result<Opaque(DefId(0:59 ~ crust_rust[ed02]::handlers::update_business::{opaque#0}::{opaque#0}), []), Infallible>> {handlers::update_business}`\u001b[0m\n\n"}
{"message":"type mismatch in function arguments","code":{"code":"E0631","explanation":"This error indicates a type mismatch in closure arguments.\n\nErroneous code example:\n\n```compile_fail,E0631\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: &str| {});\n}\n```\n\nThe error occurs because `foo` accepts a closure that takes an `i32` argument,\nbut in `main`, it is passed a closure with a `&str` argument.\n\nThis can be resolved by changing the type annotation or removing it entirely\nif it can be inferred.\n\n```\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: i32| {});\n}\n```\n"},"level":"error","spans":[{"file_name":"src/routes.rs","byte_start":1495,"byte_end":1503,"line_start":56,"line_end":56,"column_start":10,"column_end":18,"is_primary":true,"text":[{"text":"        .and_then(handlers::update_business)","highlight_start":10,"highlight_end":18}],"label":"expected signature of `fn(std::string::String, Business, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/handlers.rs","byte_start":1003,"byte_end":1112,"line_start":37,"line_end":37,"column_start":1,"column_end":110,"is_primary":false,"text":[{"text":"pub async fn update_business(id: i32, new_business: Business, db: Db) -> Result<impl warp::Reply, Infallible> {","highlight_start":1,"highlight_end":110}],"label":"found signature of `fn(i32, Business, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required because of the requirements on the impl of `warp::generic::Func<(std::string::String, Business, Arc<tokio::sync::Mutex<Vec<Business>>>)>` for `fn(i32, Business, Arc<tokio::sync::Mutex<Vec<Business>>>) -> impl Future<Output = Result<Opaque(DefId(0:59 ~ crust_rust[ed02]::handlers::update_business::{opaque#0}::{opaque#0}), []), Infallible>> {handlers::update_business}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0631]\u001b[0m\u001b[0m\u001b[1m: type mismatch in function arguments\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/routes.rs:56:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        .and_then(handlers::update_business)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected signature of `fn(std::string::String, Business, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/handlers.rs:37:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub async fn update_business(id: i32, new_business: Business, db: Db) -> Result<impl warp::Reply, Infallible> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfound signature of `fn(i32, Business, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `warp::generic::Func<(std::string::String, Business, Arc<tokio::sync::Mutex<Vec<Business>>>)>` for `fn(i32, Business, Arc<tokio::sync::Mutex<Vec<Business>>>) -> impl Future<Output = Result<Opaque(DefId(0:59 ~ crust_rust[ed02]::handlers::update_business::{opaque#0}::{opaque#0}), []), Infallible>> {handlers::update_business}`\u001b[0m\n\n"}
{"message":"type mismatch in function arguments","code":{"code":"E0631","explanation":"This error indicates a type mismatch in closure arguments.\n\nErroneous code example:\n\n```compile_fail,E0631\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: &str| {});\n}\n```\n\nThe error occurs because `foo` accepts a closure that takes an `i32` argument,\nbut in `main`, it is passed a closure with a `&str` argument.\n\nThis can be resolved by changing the type annotation or removing it entirely\nif it can be inferred.\n\n```\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: i32| {});\n}\n```\n"},"level":"error","spans":[{"file_name":"src/routes.rs","byte_start":1786,"byte_end":1811,"line_start":66,"line_end":66,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"        .and_then(handlers::delete_business)","highlight_start":19,"highlight_end":44}],"label":"expected signature of `fn(std::string::String, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/handlers.rs","byte_start":1382,"byte_end":1467,"line_start":49,"line_end":49,"column_start":1,"column_end":86,"is_primary":false,"text":[{"text":"pub async fn delete_business(id: i32, db: Db) -> Result<impl warp::Reply, Infallible> {","highlight_start":1,"highlight_end":86}],"label":"found signature of `fn(i32, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/routes.rs","byte_start":1777,"byte_end":1785,"line_start":66,"line_end":66,"column_start":10,"column_end":18,"is_primary":false,"text":[{"text":"        .and_then(handlers::delete_business)","highlight_start":10,"highlight_end":18}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required because of the requirements on the impl of `warp::generic::Func<(std::string::String, Arc<tokio::sync::Mutex<Vec<Business>>>)>` for `fn(i32, Arc<tokio::sync::Mutex<Vec<Business>>>) -> impl Future<Output = Result<Opaque(DefId(0:64 ~ crust_rust[ed02]::handlers::delete_business::{opaque#0}::{opaque#0}), []), Infallible>> {handlers::delete_business}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0631]\u001b[0m\u001b[0m\u001b[1m: type mismatch in function arguments\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/routes.rs:66:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        .and_then(handlers::delete_business)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected signature of `fn(std::string::String, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/handlers.rs:49:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub async fn delete_business(id: i32, db: Db) -> Result<impl warp::Reply, Infallible> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfound signature of `fn(i32, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `warp::generic::Func<(std::string::String, Arc<tokio::sync::Mutex<Vec<Business>>>)>` for `fn(i32, Arc<tokio::sync::Mutex<Vec<Business>>>) -> impl Future<Output = Result<Opaque(DefId(0:64 ~ crust_rust[ed02]::handlers::delete_business::{opaque#0}::{opaque#0}), []), Infallible>> {handlers::delete_business}`\u001b[0m\n\n"}
{"message":"type mismatch in function arguments","code":{"code":"E0631","explanation":"This error indicates a type mismatch in closure arguments.\n\nErroneous code example:\n\n```compile_fail,E0631\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: &str| {});\n}\n```\n\nThe error occurs because `foo` accepts a closure that takes an `i32` argument,\nbut in `main`, it is passed a closure with a `&str` argument.\n\nThis can be resolved by changing the type annotation or removing it entirely\nif it can be inferred.\n\n```\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: i32| {});\n}\n```\n"},"level":"error","spans":[{"file_name":"src/routes.rs","byte_start":1777,"byte_end":1785,"line_start":66,"line_end":66,"column_start":10,"column_end":18,"is_primary":true,"text":[{"text":"        .and_then(handlers::delete_business)","highlight_start":10,"highlight_end":18}],"label":"expected signature of `fn(std::string::String, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/handlers.rs","byte_start":1382,"byte_end":1467,"line_start":49,"line_end":49,"column_start":1,"column_end":86,"is_primary":false,"text":[{"text":"pub async fn delete_business(id: i32, db: Db) -> Result<impl warp::Reply, Infallible> {","highlight_start":1,"highlight_end":86}],"label":"found signature of `fn(i32, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required because of the requirements on the impl of `warp::generic::Func<(std::string::String, Arc<tokio::sync::Mutex<Vec<Business>>>)>` for `fn(i32, Arc<tokio::sync::Mutex<Vec<Business>>>) -> impl Future<Output = Result<Opaque(DefId(0:64 ~ crust_rust[ed02]::handlers::delete_business::{opaque#0}::{opaque#0}), []), Infallible>> {handlers::delete_business}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0631]\u001b[0m\u001b[0m\u001b[1m: type mismatch in function arguments\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/routes.rs:66:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        .and_then(handlers::delete_business)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected signature of `fn(std::string::String, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/handlers.rs:49:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub async fn delete_business(id: i32, db: Db) -> Result<impl warp::Reply, Infallible> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfound signature of `fn(i32, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `warp::generic::Func<(std::string::String, Arc<tokio::sync::Mutex<Vec<Business>>>)>` for `fn(i32, Arc<tokio::sync::Mutex<Vec<Business>>>) -> impl Future<Output = Result<Opaque(DefId(0:64 ~ crust_rust[ed02]::handlers::delete_business::{opaque#0}::{opaque#0}), []), Infallible>> {handlers::delete_business}`\u001b[0m\n\n"}
{"message":"type mismatch in function arguments","code":{"code":"E0631","explanation":"This error indicates a type mismatch in closure arguments.\n\nErroneous code example:\n\n```compile_fail,E0631\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: &str| {});\n}\n```\n\nThe error occurs because `foo` accepts a closure that takes an `i32` argument,\nbut in `main`, it is passed a closure with a `&str` argument.\n\nThis can be resolved by changing the type annotation or removing it entirely\nif it can be inferred.\n\n```\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: i32| {});\n}\n```\n"},"level":"error","spans":[{"file_name":"src/routes.rs","byte_start":1204,"byte_end":1226,"line_start":45,"line_end":45,"column_start":19,"column_end":41,"is_primary":true,"text":[{"text":"        .and_then(handlers::get_business)","highlight_start":19,"highlight_end":41}],"label":"expected signature of `fn(std::string::String, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/handlers.rs","byte_start":668,"byte_end":754,"line_start":28,"line_end":28,"column_start":1,"column_end":87,"is_primary":false,"text":[{"text":"pub async fn get_business(id: i32, db: Db) -> Result<Box<dyn warp::Reply>, Infallible> {","highlight_start":1,"highlight_end":87}],"label":"found signature of `fn(i32, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/routes.rs","byte_start":1195,"byte_end":1203,"line_start":45,"line_end":45,"column_start":10,"column_end":18,"is_primary":false,"text":[{"text":"        .and_then(handlers::get_business)","highlight_start":10,"highlight_end":18}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required because of the requirements on the impl of `warp::generic::Func<(std::string::String, Arc<tokio::sync::Mutex<Vec<Business>>>)>` for `fn(i32, Arc<tokio::sync::Mutex<Vec<Business>>>) -> impl Future<Output = Result<Box<(dyn Reply + 'static)>, Infallible>> {handlers::get_business}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0631]\u001b[0m\u001b[0m\u001b[1m: type mismatch in function arguments\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/routes.rs:45:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        .and_then(handlers::get_business)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected signature of `fn(std::string::String, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/handlers.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub async fn get_business(id: i32, db: Db) -> Result<Box<dyn warp::Reply>, Infallible> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfound signature of `fn(i32, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `warp::generic::Func<(std::string::String, Arc<tokio::sync::Mutex<Vec<Business>>>)>` for `fn(i32, Arc<tokio::sync::Mutex<Vec<Business>>>) -> impl Future<Output = Result<Box<(dyn Reply + 'static)>, Infallible>> {handlers::get_business}`\u001b[0m\n\n"}
{"message":"type mismatch in function arguments","code":{"code":"E0631","explanation":"This error indicates a type mismatch in closure arguments.\n\nErroneous code example:\n\n```compile_fail,E0631\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: &str| {});\n}\n```\n\nThe error occurs because `foo` accepts a closure that takes an `i32` argument,\nbut in `main`, it is passed a closure with a `&str` argument.\n\nThis can be resolved by changing the type annotation or removing it entirely\nif it can be inferred.\n\n```\nfn foo<F: Fn(i32)>(f: F) {\n}\n\nfn main() {\n    foo(|x: i32| {});\n}\n```\n"},"level":"error","spans":[{"file_name":"src/routes.rs","byte_start":1195,"byte_end":1203,"line_start":45,"line_end":45,"column_start":10,"column_end":18,"is_primary":true,"text":[{"text":"        .and_then(handlers::get_business)","highlight_start":10,"highlight_end":18}],"label":"expected signature of `fn(std::string::String, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/handlers.rs","byte_start":668,"byte_end":754,"line_start":28,"line_end":28,"column_start":1,"column_end":87,"is_primary":false,"text":[{"text":"pub async fn get_business(id: i32, db: Db) -> Result<Box<dyn warp::Reply>, Infallible> {","highlight_start":1,"highlight_end":87}],"label":"found signature of `fn(i32, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required because of the requirements on the impl of `warp::generic::Func<(std::string::String, Arc<tokio::sync::Mutex<Vec<Business>>>)>` for `fn(i32, Arc<tokio::sync::Mutex<Vec<Business>>>) -> impl Future<Output = Result<Box<(dyn Reply + 'static)>, Infallible>> {handlers::get_business}`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0631]\u001b[0m\u001b[0m\u001b[1m: type mismatch in function arguments\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/routes.rs:45:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        .and_then(handlers::get_business)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected signature of `fn(std::string::String, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/handlers.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub async fn get_business(id: i32, db: Db) -> Result<Box<dyn warp::Reply>, Infallible> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfound signature of `fn(i32, Arc<tokio::sync::Mutex<Vec<Business>>>) -> _`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `warp::generic::Func<(std::string::String, Arc<tokio::sync::Mutex<Vec<Business>>>)>` for `fn(i32, Arc<tokio::sync::Mutex<Vec<Business>>>) -> impl Future<Output = Result<Box<(dyn Reply + 'static)>, Infallible>> {handlers::get_business}`\u001b[0m\n\n"}
{"message":"aborting due to 6 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 6 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0631`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0631`.\u001b[0m\n"}
